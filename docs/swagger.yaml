swagger: "2.0"
info:
  description: "This is a RESTful API for an e-commerce application."
  version: "1.0.0"
  title: "E-commerce API"
host: "localhost:8080"
basePath: "/api/v1"
schemes:
  - "http"
paths:
  /users/register:
    post:
      summary: "Register a new user"
      parameters:
        - in: "body"
          name: "user"
          required: true
          schema:
            type: "object"
            properties:
              email:
                type: "string"
                example: "user@example.com"
              password:
                type: "string"
                example: "securepassword"
      responses:
        201:
          description: "User registered successfully"
        400:
          description: "Invalid input"
  /users/login:
    post:
      summary: "Login a user"
      parameters:
        - in: "body"
          name: "user"
          required: true
          schema:
            type: "object"
            properties:
              email:
                type: "string"
                example: "user@example.com"
              password:
                type: "string"
                example: "securepassword"
      responses:
        200:
          description: "Login successful"
          schema:
            type: "object"
            properties:
              token:
                type: "string"
        401:
          description: "Invalid credentials"
  /products:
    post:
      summary: "Create a new product"
      security:
        - jwt: []
      parameters:
        - in: "body"
          name: "product"
          required: true
          schema:
            type: "object"
            properties:
              name:
                type: "string"
                example: "Product Name"
              price:
                type: "number"
                format: "float"
                example: 99.99
              description:
                type: "string"
                example: "Product description"
      responses:
        201:
          description: "Product created successfully"
        403:
          description: "Forbidden"
  /products/{id}:
    get:
      summary: "Get a product by ID"
      parameters:
        - in: "path"
          name: "id"
          required: true
          type: "string"
      responses:
        200:
          description: "Product retrieved successfully"
        404:
          description: "Product not found"
    put:
      summary: "Update a product"
      security:
        - jwt: []
      parameters:
        - in: "path"
          name: "id"
          required: true
          type: "string"
        - in: "body"
          name: "product"
          required: true
          schema:
            type: "object"
            properties:
              name:
                type: "string"
              price:
                type: "number"
                format: "float"
              description:
                type: "string"
      responses:
        200:
          description: "Product updated successfully"
        403:
          description: "Forbidden"
        404:
          description: "Product not found"
    delete:
      summary: "Delete a product"
      security:
        - jwt: []
      parameters:
        - in: "path"
          name: "id"
          required: true
          type: "string"
      responses:
        204:
          description: "Product deleted successfully"
        403:
          description: "Forbidden"
        404:
          description: "Product not found"
  /orders:
    post:
      summary: "Place an order"
      security:
        - jwt: []
      parameters:
        - in: "body"
          name: "order"
          required: true
          schema:
            type: "object"
            properties:
              product_ids:
                type: "array"
                items:
                  type: "string"
                example: ["product_id_1", "product_id_2"]
      responses:
        201:
          description: "Order placed successfully"
        403:
          description: "Forbidden"
  /orders/{id}:
    get:
      summary: "Get an order by ID"
      security:
        - jwt: []
      parameters:
        - in: "path"
          name: "id"
          required: true
          type: "string"
      responses:
        200:
          description: "Order retrieved successfully"
        404:
          description: "Order not found"
    delete:
      summary: "Cancel an order"
      security:
        - jwt: []
      parameters:
        - in: "path"
          name: "id"
          required: true
          type: "string"
      responses:
        204:
          description: "Order canceled successfully"
        403:
          description: "Forbidden"
        404:
          description: "Order not found"
securityDefinitions:
  jwt:
    type: "apiKey"
    name: "Authorization"
    in: "header"